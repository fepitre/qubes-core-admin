#!/usr/bin/python3

import gi
import sys
import os
import re
import logging
import textwrap

gi.require_version('Notify', '0.7')
from gi.repository import Notify


def sanitize(untrusted_str):
    # filter html tags
    valid_str = re.sub('<.*?>', '', untrusted_str)
    # drop special chars
    valid_str = re.sub(r'[^a-zA-Z0-9\s.,]+', '_', valid_str)
    return valid_str


def displayable_text(trusted_str, str_len):
    wrapper = textwrap.TextWrapper(width=int(str_len / 2))
    trimmed_text = re.sub(r'[ \t]+', " ", trusted_str.strip())
    if len(trimmed_text) > str_len:
        short_str = textwrap.shorten(text=trimmed_text, width=str_len)
        wrapped_text = wrapper.fill(text=short_str)
    else:
        wrapped_text = wrapper.fill(text=trimmed_text)
    return wrapped_text


def get_items(vmname, data):
    # split header to get size of app_name and summary
    wrapped_appname = 'NONAME'
    wrapped_summary = 'ERROR'
    wrapped_body = 'ERROR'
    try:
        # split and filter components
        split_data = data.split('\n')
        appname = split_data[0]
        summary = split_data[1]
        body = split_data[2]

        # display max 60 chars in summary and 120 in body
        wrapped_appname = displayable_text(appname, 30)
        wrapped_summary = displayable_text(summary, 60)
        wrapped_body = displayable_text(body, 120)
    except (IndexError, ValueError) as e:
        logging.error("Failed to parse notification data: %s" % str(e))

    appname_summary = "{} -- {}: {}".format(vmname, wrapped_appname,
                                            wrapped_summary)

    return wrapped_appname, appname_summary, wrapped_body


def main():
    if not os.environ.get('DISPLAY'):
        os.environ.setdefault('DISPLAY', ':0')
    vmname = os.environ.get("QREXEC_REMOTE_DOMAIN")
    untrusted_data = sys.stdin.read()
    data = sanitize(untrusted_data)
    app_name, summary, body = get_items(vmname, data)

    Notify.init(app_name)
    Notify.Notification.new(summary=summary, body=body).show()


if __name__ == '__main__':
    main()
